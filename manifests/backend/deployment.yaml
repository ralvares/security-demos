# Namespace for backend
apiVersion: v1
kind: Namespace
metadata:
  name: backend
  labels:
    name: backend
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: report-generator
  namespace: backend
  labels:
    app: report-generator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: report-generator
  labels:
    app: report-generator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: report-generator
    namespace: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server-v2
  namespace: backend
  labels:
    app: api-server-v2
    app.kubernetes.io/part-of: api-server
  annotations:
      app.openshift.io/connects-to: "backend-atlas-v2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-server-v2
  template:
    metadata:
      labels:
        app: api-server-v2
    spec:
      containers:
        - image: quay.io/vuln/api-server:v2
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
              "-connect",
              "$(BACKEND_ATLAS_SERVICE_ADDR):$(BACKEND_ATLAS_SERVICE_PORT),$(BACKEND_ATLAS_V2_SERVICE_ADDR):$(BACKEND_ATLAS_V2_SERVICE_PORT)",
            ]
          imagePullPolicy: Always
          name: api-server-v2
          env:
            - name: BACKEND_ATLAS_SERVICE_ADDR
              value: "backend-atlas-service"
            - name: BACKEND_ATLAS_SERVICE_PORT
              value: "8080"
            - name: BACKEND_ATLAS_V2_SERVICE_ADDR
              value: "backend-atlas-v2-service"
            - name: BACKEND_ATLAS_V2_SERVICE_PORT
              value: "8080"
          ports:
            - containerPort: 8080
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: backend
  labels:
    app: api-server
    app.kubernetes.io/part-of: api-server
  annotations:
      app.openshift.io/connects-to: "backend-atlas"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
        - image: quay.io/vuln/api-server:latest
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
              "-connect",
              "$(BACKEND_ATLAS_SERVICE_ADDR):$(BACKEND_ATLAS_SERVICE_PORT),$(BACKEND_ATLAS_V2_SERVICE_ADDR):$(BACKEND_ATLAS_V2_SERVICE_PORT)",
            ]
          imagePullPolicy: Always
          name: api-server-v2
          env:
            - name: BACKEND_ATLAS_SERVICE_ADDR
              value: "backend-atlas-service"
            - name: BACKEND_ATLAS_SERVICE_PORT
              value: "8080"
            - name: BACKEND_ATLAS_V2_SERVICE_ADDR
              value: "backend-atlas-v2-service"
            - name: BACKEND_ATLAS_V2_SERVICE_PORT
              value: "8080"
          ports:
            - containerPort: 8080
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-atlas
  namespace: backend
  labels:
    app: backend-atlas
    app.kubernetes.io/part-of: backend
  annotations:
    app.openshift.io/connects-to: "backend-cache"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-atlas
  template:
    metadata:
      labels:
        app: backend-atlas
    spec:
      containers:
        - image: quay.io/vuln/backend-atlas:latest
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
              "-connect",
              "$(BACKEND_CACHE_SERVER_SERVICE_ADDR):$(BACKEND_CACHE_SERVICE_PORT)",
            ]
          imagePullPolicy: Always
          name: backend-atlas
          env:
            - name: BACKEND_CACHE_SERVER_SERVICE_ADDR
              value: "backend-cache-service"
            - name: BACKEND_CACHE_SERVICE_PORT
              value: "8080"
          ports:
            - containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-cache
  namespace: backend
  labels:
    app: backend-cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-cache
  template:
    metadata:
      labels:
        app: backend-cache
    spec:
      containers:
        - image: quay.io/vuln/backend-cache:latest
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
            ]
          imagePullPolicy: Always
          name: backend-cache
          ports:
            - containerPort: 8080
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-atlas-v2
  namespace: backend
  labels:
    app: backend-atlas-v2
    app.kubernetes.io/part-of: backend
  annotations:
    app.openshift.io/connects-to: "backend-cache"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend-atlas-v2
  template:
    metadata:
      labels:
        app: backend-atlas-v2
    spec:
      containers:
        - image: quay.io/vuln/backend-atlas:v2
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
              "-connect",
              "$(BACKEND_CACHE_SERVER_SERVICE_ADDR):$(BACKEND_CACHE_SERVICE_PORT)",
            ]
          imagePullPolicy: Always
          name: backend-atlas-v2
          securityContext:
            capabilities:
              drop: ["ALL"]
          env:
            - name: BACKEND_CACHE_SERVER_SERVICE_ADDR
              value: "backend-cache-service"
            - name: BACKEND_CACHE_SERVICE_PORT
              value: "8080"
          ports:
            - containerPort: 8080
              protocol: TCP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: report-generator
  namespace: backend
  labels:
    app: report-generator
  annotations:
    app.openshift.io/connects-to: "api-server,api-server-v2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: report-generator
  template:
    metadata:
      labels:
        app: report-generator
    spec:
      serviceAccountName: report-generator
      containers:
        - image: quay.io/vuln/report-generator:latest
          command: ["/bin/entrypoint"]
          args:
            [
              "-listen",
              "8080",
              "-connect",
              "$(API_SERVER_SERVICE_ADDR):$(API_SERVER_SERVICE_PORT),$(API_SERVER_V2_SERVICE_ADDR):$(API_SERVER_V2_SERVICE_PORT)",
            ]
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add: ["SYS_ADMIN"]
            privileged: true
          name: report-generator
          env:
            - name: API_SERVER_SERVICE_ADDR
              value: "api-server-service"
            - name: API_SERVER_SERVICE_PORT
              value: "8080"
            - name: API_SERVER_V2_SERVICE_ADDR
              value: "api-server-v2-service"
            - name: API_SERVER_V2_SERVICE_PORT
              value: "8080"
          ports:
            - containerPort: 8080
              protocol: TCP
---
# Service named "api-server-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-server
  name: api-server-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: api-server
  type: ClusterIP
---
# Service named "api-server-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-server-v2
  name: api-server-v2-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: api-server-v2
  type: ClusterIP
---
# Service named "backend-atlas-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backend-atlas
  name: backend-atlas-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: backend-atlas
  type: ClusterIP
---
# Service named "backend-atlas-v2-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backend-atlas-v2
  name: backend-atlas-v2-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: backend-atlas-v2
  type: ClusterIP
---
# Service named "backend-cache-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: backend-cache
  name: backend-cache-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: backend-cache
  type: ClusterIP
---
# Service named "report-generator-service"
# Listens on :8080
apiVersion: v1
kind: Service
metadata:
  labels:
    app: report-generator
  name: report-generator-service
  namespace: backend
spec:
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
      name: http
  selector:
    app: report-generator
  type: ClusterIP